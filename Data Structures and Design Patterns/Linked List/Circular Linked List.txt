//Note: In CLL, we only have tail pointer as we can access both head and tail using the same pointer.
//There is no start and end to the list hence we insert and delete data based on what is stored in Linked list

#include <iostream>
using namespace std;

class Node{
  public:
      int data;
      Node* next;
      
      Node(int data){
          this->data = data;
          this->next = NULL;
      }
  
};

void insertData(Node* &tail, int element, int data){
    if(tail == NULL){
        tail = new Node(data);
        tail->next = tail;
        return;
    }
    
    Node* curr = tail;
    
    while(curr->data != element){
        curr = curr->next;
    }
    
    Node* temp = new Node(data);
    temp->next = curr->next;
    curr->next = temp;
}

void deleteNode(Node* &tail,int data){
    
    if(tail == NULL){
        cout<<"No element in the list"<<endl;
        return;
    }
    
    //one element
    if(tail->next == tail){
        Node* temp = tail;
        temp->next = NULL;
        tail = NULL;
        delete temp;
        return;
    }
    
    Node* curr = tail->next;
    Node* prev = tail;
    while(curr->data != data){
        prev = curr;
        curr = curr->next;
    }
    
    //preserve tail
    if(tail == curr){
        tail = tail->next;
    }
    
    prev->next = curr->next;
    curr->next = NULL;
    delete curr;
}

void print(Node* tail){
    
    if(tail == NULL){
        cout<<"LL is empty"<<endl;
        return;
    }
    
    Node* temp = tail;
    
    do{
        cout<<temp->data<<" ";
        temp = temp->next;
    }while(temp!=tail);
    
    cout<<endl;
}

int main()
{
    Node* tail = NULL;
    insertData(tail,5,6);
    print(tail);
    
    // insertData(tail,6,7);
    // print(tail);
    
    // insertData(tail,7,8);
    // print(tail);
    
    deleteNode(tail,6);
    print(tail);
    
    // cout<<"here:";
    // insertData(tail,5,6);
    // print(tail);
    
    cout<<(tail == NULL)<<endl;

}
