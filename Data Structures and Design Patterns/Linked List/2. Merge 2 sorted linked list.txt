Node* solve(Node* first, Node* second) {
    
    // for only one node in first list
    if(first->next == NULL) {
        first->next = second;
        return first;
    }
    
    
    Node* prev = first;
    Node* curr = first->next;
    Node* curr2 = second;
    
    while(curr && curr2){
        
        if((curr2->data >= prev->data) && (curr2->data <= curr->data)) {
            Node* temp = curr2->next;
            prev->next = curr2;
            curr2->next = curr;
            
            curr2 = temp;
            prev = prev->next;
        }
        
        else {
            prev = prev->next;
            curr = curr->next;
        }
        
    }
    
    if(curr == NULL){
        prev->next = curr2;
        return first;
    }
    
    return first;
}

Node* sortedMerge(Node* head1, Node* head2)  
{  
    if(head1 == NULL)
        return head2;
    
    if(head2 == NULL)
        return head1;
        
    if(head1->data < head2->data)
        return solve(head1, head2);
    return solve(head2, head1);
}  
