Note the findmid func here. It is important to check for condition when there are only 2 nodes in a LL.


Node* findMid(Node* head) {
        
        if(head == NULL)
            return NULL;
        
        Node* slow = head;
        Node* fast = head->next;
        
        while(fast != NULL) {
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
                slow = slow->next;
            }
        }
        
        return slow;
    }
    
    void insertAtTail(Node* &head, Node* &tail, Node* p) {
        if(head == NULL) {
            head = p;
            tail = p;
        }
        else {
            tail->next = p;
            tail = tail->next;
        }
    }

    Node* merge(Node* head1, Node* head2) {
        if(head1 == NULL)
            return head2;
            
        if(head2 == NULL)
            return head1;
            
        Node* head = NULL;
        Node* tail = NULL;
        
        while(head1 != NULL && head2 != NULL) {
            if(head1->data < head2->data) {
                insertAtTail(head, tail, head1);
                head1 = head1->next;
            }
            else {
                insertAtTail(head, tail, head2);
                head2 = head2->next;
            }
        }
        
        while(head1 != NULL) {
            insertAtTail(head, tail, head1);
            head1 = head1->next;
        }
        
        while(head2 != NULL) {
            insertAtTail(head, tail, head2);
            head2 = head2->next;
        }
        
        
        return head;
        
    }   
    
    Node* mergeSort(Node* head) {
        
        if(head == NULL || head->next == NULL)
            return head;
        
        Node* mid = findMid(head);
        Node* left = head;
        Node* right = mid->next;
        
        mid->next = NULL;
        
        Node* list1 = mergeSort(left);
        Node* list2 = mergeSort(right);
        
        return merge(list1, list2);
        
    }