
Approches:

Apply two for loops:
	T.C = O(n^2)
	S.C = O(1)

Sort the list and then remove duplicates:
	T.C = O(nlogn)
	S.C = O(1)

Using map(implemented in below code):
	T.C = O(n)
	S.C = O(n)

class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
        
        if(head == NULL || head->next == NULL)
            return head;
        
        map<int,bool> visited;
        
        Node* curr = head;
        Node* prev = NULL;
        
        while(curr!=NULL){
            if(visited[curr->data]){
                Node* temp = curr;
                prev->next = curr->next;
                curr = curr->next;
                temp->next = NULL;
                delete temp;
            }
            else{
                visited[curr->data] = true;
                prev = curr;
                curr = curr->next;
            }
        }
        
        return head;
    }
};
