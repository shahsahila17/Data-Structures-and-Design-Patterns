#include <bits/stdc++.h> 
class CircularQueue{

    private:
        int* arr;
        int front;
        int rear;
        int size;

    public:
    // Initialize your data structure.
    CircularQueue(int n){
        arr = new int[n];
        front = -1;
        rear = -1;
        size = n;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        
        if( (front == 0 && rear == size-1) || (rear+1) % size == front ) {
            return false;
        }

        if(front == -1 && rear == -1) {
            front = 0;
            rear = 0;
            arr[rear] = value;
        }
        else {
            rear = (rear+1) % size;
            arr[rear] = value;
        }

        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){

        if(front == -1) {
            return -1;
        }

        int val = arr[front];
        if(front == rear) {
            front = -1;
            rear = -1;
            return val;
        }
        front = (front+1) % size;
        return val;
    }











};