class Solution {
  public:

    // Function to return a tree created from postorder and inoreder traversals.
    
    int find(int in[], int data, int start, int end) {
        for(int i=start; i<=end; i++)
            if(in[i] == data)
                return i;
        return 0;
    }
    
    Node* createTree(int n, int in[], int post[], int start, int end, int& i) {
        
        if(start>end)
            return NULL;
        
        Node* root = new Node(post[i]);
        
        int index = find(in, post[i], start, end);
        
        i--;
        
        root->right = createTree(n, in, post, index+1, end, i);
        root->left = createTree(n, in, post, start, index-1, i);
        
        return root;
    }
    
    Node *buildTree(int n, int in[], int post[]) {
        
        int start = 0;
        int end = n-1;
        int i = n-1;
        
        return createTree(n, in, post, start, end, i);
    }
    
    
    
};'	