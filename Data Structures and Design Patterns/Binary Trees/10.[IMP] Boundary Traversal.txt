class Solution {
public:

    void leftTraversal(Node* root, vector<int>& ans) {
        
        if(root == NULL)
            return;
            
        if(root->left == NULL && root->right == NULL)
            return;
            
        ans.push_back(root->data);
        
        if(root->left)
            leftTraversal(root->left, ans);
        else
            leftTraversal(root->right, ans);
    }
    
    void leafNodes(Node* root, vector<int>& ans) {
        
        if(root == NULL)
            return;
            
        if(root->left == NULL && root->right == NULL) {
            ans.push_back(root->data);
            return;
        }
        
        leafNodes(root->left, ans);
        leafNodes(root->right, ans);
        
    }
    
    void rightTraversal(Node* root, vector<int>& ans) {
        
        if(root == NULL)
            return;
            
        if(root->left == NULL && root->right == NULL)
            return;
            
        if(root->right)
            rightTraversal(root->right, ans);
        else 
            rightTraversal(root->left, ans);
            
        ans.push_back(root->data);
    }

    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        
        if(root == NULL)
            return ans;
        if(root->left == NULL && root->right == NULL) {
            ans.push_back(root->data);
            return ans;
        }
        
        ans.push_back(root->data);
        
        leftTraversal(root->left, ans);
        leafNodes(root, ans);
        rightTraversal(root->right, ans);
        
        return ans;
    }
    
};