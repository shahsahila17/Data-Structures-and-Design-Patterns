#include <iostream>
#include <queue>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            left = right = NULL;
        }
};

Node* insert(Node* root) {
    int data;
    
    cout<<"Enter data: ";
    cin>>data;
    
    if(data == -1)
        return NULL;
        
    root = new Node(data);
    
    cout<<"Enter data to left of "<<data<<endl;
    root->left = insert(root);
    
    cout<<"Enter data to right of "<<data<<endl;
    root->right = insert(root);
    
    return root;
}

Node* constructTreeFromLevelOrder() {
    
    queue<Node*> q;
    int data;
    
    cout<<"Enter data: "<<endl;
    cin>>data;
    
    if(data == -1)
        return NULL;
        
    Node* root = new Node(data);
    q.push(root);
    
    while(!q.empty()) {
        Node* temp = q.front();
        q.pop();
        
        cout<<"Enter data to left of "<<temp->data<<endl;
        cin>>data;
        
        if(data != -1) {
            temp->left = new Node(data);
            q.push(temp->left);
        }
        
        cout<<"Enter data to right of "<<temp->data<<endl;
        cin>>data;
        
        if(data != -1) {
            temp->right = new Node(data);
            q.push(temp->right);
        }
    }   
    
    return root;
}

void levelOrder(Node* root) {
    
    queue<Node*> q;
    q.push(root);
    
    while(!q.empty()) {
        
        int n = q.size();
        
        for(int i=0; i<n; i++) {
            
            Node* temp = q.front();
            q.pop();
            
            cout<<temp->data<<" ";
            
            if(temp->left)
                q.push(temp->left);
            if(temp->right)
                q.push(temp->right);
        }
        
        cout<<"\n";
    }
}

void inorder(Node* root) {
    
    if(root == NULL)
        return;
        
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void postorder(Node* root) {
    
    if(root == NULL)
        return;
        
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

void preorder(Node* root) {
    
    if(root == NULL)
        return;
        
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

int main()
{
    // Node* root = NULL;
    Node* root = constructTreeFromLevelOrder();
    cout<<endl;
    levelOrder(root);
    cout<<endl;
    preorder(root);
    cout<<endl;
    inorder(root);
    cout<<endl;
    postorder(root);
}








